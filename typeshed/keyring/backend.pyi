import abc
from . import credentials as credentials, errors as errors, util as util
from .util import properties as properties
from typing import Any

__metaclass__ = type
log: Any
by_priority: Any

class KeyringBackendMeta(abc.ABCMeta):
    def __init__(cls, name: Any, bases: Any, dict: Any) -> None: ...

class KeyringBackend(metaclass=KeyringBackendMeta):
    def priority(cls) -> None: ...
    @classmethod
    def viable(cls): ...
    @classmethod
    def get_viable_backends(cls): ...
    @classmethod
    def name(cls): ...
    @abc.abstractmethod
    def get_password(self, service: Any, username: Any) -> Any: ...
    @abc.abstractmethod
    def set_password(self, service: Any, username: Any, password: Any) -> Any: ...
    def delete_password(self, service: Any, username: Any) -> None: ...
    def get_credential(self, service: Any, username: Any): ...
    def set_properties_from_env(self): ...

class Crypter(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def encrypt(self, value: Any) -> Any: ...
    @abc.abstractmethod
    def decrypt(self, value: Any) -> Any: ...

class NullCrypter(Crypter):
    def encrypt(self, value: Any): ...
    def decrypt(self, value: Any): ...

def get_all_keyring(): ...
